{"ast":null,"code":"import { GET_ERRORS, GET_PROJECT_TASK, DELETE_PROJECT_TASK, GET_BACKLOG } from \"../actions/types\";\nconst intialState = {\n  project_tasks: [],\n  project_task: {}\n};\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case GET_BACKLOG:\n      return { ...state,\n        project_tasks: action.payload\n      };\n\n    case GET_PROJECT_TASK:\n      return { ...state,\n        project_task: action.payload\n      };\n\n    case DELETE_PROJECT_TASK:\n      return { ...state,\n        //if everything goes well, and API call is a success\n        project_tasks: state.project_tasks.filter(project_task => project_task.projectSequence !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/PPMTool_Agile/ppmtool-react-client/src/reducers/backlogReducer.js"],"names":["GET_ERRORS","GET_PROJECT_TASK","DELETE_PROJECT_TASK","GET_BACKLOG","intialState","project_tasks","project_task","state","action","type","payload","filter","projectSequence"],"mappings":"AAAA,SACEA,UADF,EAEEC,gBAFF,EAGEC,mBAHF,EAIEC,WAJF,QAKO,kBALP;AAOA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,aAAa,EAAE,EADG;AAElBC,EAAAA,YAAY,EAAE;AAFI,CAApB;AAKA,eAAe,UAAUC,KAAK,GAAGH,WAAlB,EAA+BI,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAFjB,OAAP;;AAIF,SAAKT,gBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELD,QAAAA,YAAY,EAAEE,MAAM,CAACE;AAFhB,OAAP;;AAIF,SAAKR,mBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAEL;AACAF,QAAAA,aAAa,EAAEE,KAAK,CAACF,aAAN,CAAoBM,MAApB,CACZL,YAAD,IAAkBA,YAAY,CAACM,eAAb,KAAiCJ,MAAM,CAACE,OAD7C;AAHV,OAAP;;AAQF;AACE,aAAOH,KAAP;AArBJ;AAuBD","sourcesContent":["import {\r\n  GET_ERRORS,\r\n  GET_PROJECT_TASK,\r\n  DELETE_PROJECT_TASK,\r\n  GET_BACKLOG,\r\n} from \"../actions/types\";\r\n\r\nconst intialState = {\r\n  project_tasks: [],\r\n  project_task: {},\r\n};\r\n\r\nexport default function (state = intialState, action) {\r\n  switch (action.type) {\r\n    case GET_BACKLOG:\r\n      return {\r\n        ...state,\r\n        project_tasks: action.payload,\r\n      };\r\n    case GET_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        project_task: action.payload,\r\n      };\r\n    case DELETE_PROJECT_TASK:\r\n      return {\r\n        ...state,\r\n        //if everything goes well, and API call is a success\r\n        project_tasks: state.project_tasks.filter(\r\n          (project_task) => project_task.projectSequence !== action.payload\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}