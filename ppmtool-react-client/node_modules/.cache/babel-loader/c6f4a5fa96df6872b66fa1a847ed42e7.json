{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\"; //importing functions\n\nimport thunk from \"redux-thunk\"; //package that is a standard way to define async action action creators...its a middleware\n\nimport rootReducer from \"./reducers\";\nconst initalState = {};\nconst middleware = [thunk]; //thunk is the middleware we would like to apply...other examples including for logging purposes\n\nlet store;\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f;\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n  store = createStore(\n  /*\r\n  A Redux app really only has one reducer function: the \"root reducer\" function that you will pass\r\n   to createStore later on. That one root reducer function is responsible for handling all of the\r\n    actions that are dispatched, and calculating what the entire new state result should be every time.\r\n      The Redux store brings together the state, actions, and reducers that make up your app. \r\n  */\n  rootReducer, initalState, compose(\n  /*\r\n  Redux uses a special kind of addon called middleware to let us customize the dispatch function.\r\n  Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.\r\n  */\n  applyMiddleware(...middleware), //Redux-Devtools provide us debugging platform for Redux apps.\n  //It allows us to perform time-travel debugging and live editing.\n  ReactReduxDevTools));\n} else {\n  // Create a new Redux store with the `createStore` function,\n  // and use the `rootReducer` for the business logic\n  store = createStore( //1\n  rootReducer, initalState, compose(applyMiddleware(...middleware)));\n}\n\nexport default store;\n/* Middleware are the main way to customize the store:\r\nMiddleware are added using the applyMiddleware enhancer\r\nMiddleware are written as three nested functions inside each other\r\nMiddleware run each time an action is dispatched\r\nMiddleware can have side effects inside\r\n*/","map":{"version":3,"sources":["C:/PPMTool_Agile/ppmtool-react-client/src/store.js"],"names":["createStore","applyMiddleware","compose","thunk","rootReducer","initalState","middleware","store","ReactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","f","navigator","userAgent","includes"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD,C,CAA+D;;AAC/D,OAAOC,KAAP,MAAkB,aAAlB,C,CAAiC;;AACjC,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB,C,CAA4B;;AAE5B,IAAII,KAAJ;AAEA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,4BAAP,GACvBD,MAAM,CAACC,4BAAP,EADuB,GAEtBC,CAAD,IAAOA,CAFX;;AAIA,IAAIF,MAAM,CAACG,SAAP,CAAiBC,SAAjB,CAA2BC,QAA3B,CAAoC,QAApC,KAAiDN,kBAArD,EAAyE;AACvED,EAAAA,KAAK,GAAGP,WAAW;AACjB;AACJ;AACA;AACA;AACA;AACA;AAEII,EAAAA,WARiB,EASjBC,WATiB,EAUjBH,OAAO;AACL;AACN;AACA;AACA;AACMD,EAAAA,eAAe,CAAC,GAAGK,UAAJ,CALV,EAML;AACA;AACAE,EAAAA,kBARK,CAVU,CAAnB;AAqBD,CAtBD,MAsBO;AACL;AACA;AACAD,EAAAA,KAAK,GAAGP,WAAW,EACjB;AACAI,EAAAA,WAFiB,EAGjBC,WAHiB,EAIjBH,OAAO,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAJU,CAAnB;AAMD;;AAED,eAAeC,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\"; //importing functions\r\nimport thunk from \"redux-thunk\"; //package that is a standard way to define async action action creators...its a middleware\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initalState = {};\r\nconst middleware = [thunk]; //thunk is the middleware we would like to apply...other examples including for logging purposes\r\n\r\nlet store;\r\n\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  : (f) => f;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n  store = createStore(\r\n    /*\r\n    A Redux app really only has one reducer function: the \"root reducer\" function that you will pass\r\n     to createStore later on. That one root reducer function is responsible for handling all of the\r\n      actions that are dispatched, and calculating what the entire new state result should be every time.\r\n\r\n      The Redux store brings together the state, actions, and reducers that make up your app. \r\n    */\r\n    rootReducer,\r\n    initalState,\r\n    compose(\r\n      /*\r\n      Redux uses a special kind of addon called middleware to let us customize the dispatch function.\r\n      Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.\r\n      */\r\n      applyMiddleware(...middleware),\r\n      //Redux-Devtools provide us debugging platform for Redux apps.\r\n      //It allows us to perform time-travel debugging and live editing.\r\n      ReactReduxDevTools\r\n    )\r\n  );\r\n} else {\r\n  // Create a new Redux store with the `createStore` function,\r\n  // and use the `rootReducer` for the business logic\r\n  store = createStore(\r\n    //1\r\n    rootReducer,\r\n    initalState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;\r\n\r\n/* Middleware are the main way to customize the store:\r\nMiddleware are added using the applyMiddleware enhancer\r\nMiddleware are written as three nested functions inside each other\r\nMiddleware run each time an action is dispatched\r\nMiddleware can have side effects inside\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}