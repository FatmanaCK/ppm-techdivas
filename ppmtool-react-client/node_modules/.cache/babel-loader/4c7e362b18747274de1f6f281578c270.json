{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport backlogReducer from \"./backlogReducer\";\nimport errorReducer from \"./errorReducer\";\nimport projectReducer from \"./projectReducer\";\nimport securityReducer from \"./securityReducer\"; //root reducer whose only job is to call the other two functions.\n\n/*\r\n*combineReducers accepts an object where the key names will become the keys in your root state object,\r\n and the values are the slice reducer functions that know how to update those slices of the Redux state.\r\n\r\n using combineReducers is what allows us to create one root reducer\r\n */\n\nexport default combineReducers({\n  errors: errorReducer,\n  // Define a top-level state field named `project`, handled by `projectReducer`\n  project: projectReducer,\n  backlog: backlogReducer,\n  security: securityReducer\n});","map":{"version":3,"sources":["C:/PPMTool_Agile/ppmtool-react-client/src/reducers/index.js"],"names":["combineReducers","backlogReducer","errorReducer","projectReducer","securityReducer","errors","project","backlog","security"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeJ,eAAe,CAAC;AAC7BK,EAAAA,MAAM,EAAEH,YADqB;AAE7B;AACAI,EAAAA,OAAO,EAAEH,cAHoB;AAI7BI,EAAAA,OAAO,EAAEN,cAJoB;AAK7BO,EAAAA,QAAQ,EAAEJ;AALmB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport backlogReducer from \"./backlogReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport projectReducer from \"./projectReducer\";\r\nimport securityReducer from \"./securityReducer\";\r\n\r\n//root reducer whose only job is to call the other two functions.\r\n/*\r\n*combineReducers accepts an object where the key names will become the keys in your root state object,\r\n and the values are the slice reducer functions that know how to update those slices of the Redux state.\r\n\r\n using combineReducers is what allows us to create one root reducer\r\n */\r\nexport default combineReducers({\r\n  errors: errorReducer,\r\n  // Define a top-level state field named `project`, handled by `projectReducer`\r\n  project: projectReducer,\r\n  backlog: backlogReducer,\r\n  security: securityReducer,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}