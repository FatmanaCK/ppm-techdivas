{"ast":null,"code":"var _jsxFileName = \"C:\\\\PPMTool_Agile\\\\ppmtool-react-client\\\\src\\\\components\\\\ProjectBoard\\\\ProjectBoard.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Backlog from \"./Backlog\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getBacklog } from \"../../actions/backlogActions\";\n\nclass ProjectBoard extends Component {\n  // constructor to handle errors\n  constructor() {\n    super();\n    this.state = {\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params; //extracting the backlogId from Route\n\n    this.props.getBacklog(id);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      id\n    } = this.props.match.params; //extracting from the Route url in App.js\n\n    const {\n      project_tasks\n    } = this.props.backlog;\n    const {\n      errors\n    } = this.state;\n    let BoardContent;\n\n    const boardAlgorithm = (errors, project_tasks) => {\n      if (project_tasks.length < 1) {\n        if (errors.projectNotFound) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"alert alert-danger text-center\",\n            role: \"alert\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }\n          }, errors.projectNotFound);\n        } else if (errors.projectIdentifier) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"alert alert-danger text-center\",\n            role: \"alert\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 13\n            }\n          }, errors.projectIdentifier);\n        } else {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"alert alert-info text-center\",\n            role: \"alert\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }\n          }, \"No Project Tasks on this Board\");\n        }\n      } else {\n        return /*#__PURE__*/React.createElement(Backlog, {\n          project_tasks_prop: project_tasks,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 16\n          }\n        });\n      }\n    };\n\n    BoardContent = boardAlgorithm(errors, project_tasks);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/addProjectTask/${id}`,\n      className: \"btn  mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"btn btn-lg btn-info\",\n      style: {\n        backgroundColor: \"#dee2e6\",\n        color: \"#5a3d75\",\n        border: \"#5a3d75\",\n        borderStyle: \"solid\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \" \", \"Create Project Task\", \" \")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), BoardContent);\n  }\n\n}\n\nProjectBoard.propTypes = {\n  backlog: PropTypes.object.isRequired,\n  getBacklog: PropTypes.func.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  backlog: state.backlog,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  getBacklog\n})(ProjectBoard);","map":{"version":3,"sources":["C:/PPMTool_Agile/ppmtool-react-client/src/components/ProjectBoard/ProjectBoard.js"],"names":["React","Component","Link","Backlog","connect","PropTypes","getBacklog","ProjectBoard","constructor","state","errors","componentDidMount","id","props","match","params","componentWillReceiveProps","nextProps","setState","render","project_tasks","backlog","BoardContent","boardAlgorithm","length","projectNotFound","projectIdentifier","backgroundColor","color","border","borderStyle","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Backlog from \"./Backlog\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getBacklog } from \"../../actions/backlogActions\";\r\n\r\nclass ProjectBoard extends Component {\r\n  // constructor to handle errors\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params; //extracting the backlogId from Route\r\n    this.props.getBacklog(id);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({ errors: nextProps.errors });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { id } = this.props.match.params; //extracting from the Route url in App.js\r\n    const { project_tasks } = this.props.backlog;\r\n    const { errors } = this.state;\r\n\r\n    let BoardContent;\r\n    const boardAlgorithm = (errors, project_tasks) => {\r\n      if (project_tasks.length < 1) {\r\n        if (errors.projectNotFound) {\r\n          return (\r\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n              {errors.projectNotFound}\r\n            </div>\r\n          );\r\n        } else if (errors.projectIdentifier) {\r\n          return (\r\n            <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n              {errors.projectIdentifier}\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div className=\"alert alert-info text-center\" role=\"alert\">\r\n              No Project Tasks on this Board\r\n            </div>\r\n          );\r\n        }\r\n      } else {\r\n        return <Backlog project_tasks_prop={project_tasks} />;\r\n      }\r\n    };\r\n\r\n    BoardContent = boardAlgorithm(errors, project_tasks);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to={`/addProjectTask/${id}`} className=\"btn  mb-3\">\r\n          <i\r\n            className=\"btn btn-lg btn-info\"\r\n            style={{\r\n              backgroundColor: \"#dee2e6\",\r\n              color: \"#5a3d75\",\r\n              border: \"#5a3d75\",\r\n              borderStyle: \"solid\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Create Project Task{\" \"}\r\n          </i>\r\n        </Link>\r\n        <br />\r\n        <hr />\r\n        {BoardContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n  backlog: PropTypes.object.isRequired,\r\n  getBacklog: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  backlog: state.backlog,\r\n  errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getBacklog })(ProjectBoard);\r\n"]},"metadata":{},"sourceType":"module"}